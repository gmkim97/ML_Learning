# What is Matplotlib?

- Plotting library for Python

- control over every aspect of a figure

- Similar to MATLAB's graphical plotting

- Work with numpy array or Pandas

# Matplotlib

- %matplotlib inline => able to see your plot inside jupyter notebook
- OR plt.show() => printing out

(1) Functional method

- plt.plot(x , y)
- plt.xlabel()
- plt.ylabel()
- plt.title()
- plt.subplot(<#_row> , <#_col> , <#_your plot>)

(2) Object Oriented method

- fig = plt.figure()  ==> imaginary empty canvus
- axes = fig.add_axes([<left_right>,<bottom_top>,<width>,<height>])
- axes.plot(x , y)
- axes.set_xlabel('')
- axes.set_ylabel('')
- axes.set_title('')

- fig = plt.figure()  ==> imaginary empty canvus
- axes1 = fig.add_axes([,,,])
- axes2 = fig.add_axes([,,,])
- axes.plot(x1 , y1)
- axes.plot(x2 , y2)

- fig,axes = plt.subplots(nrow=1 , ncols=2 )
==> "axes" object is an array of matplotlib axes
- axes[0].plot(x1, y1)
- axes[1].plot(x2, y2)


 ## Figure Size and DPI

- fig = plt.figure(figsize=(3,2))
- axes = fig.add_axes([,,,])

- fig,axes = plt.subplots(figsize=(3,2))
- axes.plot(x , y)

## Save Figure

- fig.savefig(<fig_name> , dpi= )

## Legends

- fig = plt.figure()
- ax = fig.add_axes([,,,])
- ax.plot(x, x**2, label='figure 1')
- ax.plot(x, x**3, label='figure 2')
- ax.legend(loc=<location_code>)

## Plot Appearance

- fig = plt.figure()
- ax = fig.add_axes([,,,])
- ax.plot(x, y, color= , linewidth= , alpha= ,linestyle= , marker= , markersize= , markerfacecolor= , ... ) => Customization
- ax.set_xlim([])
- ax.set_ylim([])

## Special Plot Types

- plt.scatter(x , y)
- plt.hist(data)
- plt.boxplot(data)

